{"is_source_file": true, "format": "C#", "description": "This file defines the INoteRepository interface, which specifies the contract for note repository operations in the domain, including methods for retrieving, listing, counting, adding, updating, removing notes and saving changes.", "external_files": ["NotesBackend.Domain.Entities"], "external_methods": [], "published": ["INoteRepository"], "classes": [{"name": "INoteRepository", "description": "Interface for note repository operations including CRUD and counting functionality."}], "methods": [{"name": "GetByIdAsync", "description": "Retrieves a note by its ID and owner ID asynchronously."}, {"name": "ListAsync", "description": "Lists notes for a specific owner with pagination asynchronously."}, {"name": "CountAsync", "description": "Counts the number of notes for a specific owner asynchronously."}, {"name": "AddAsync", "description": "Adds a new note asynchronously."}, {"name": "Update", "description": "Updates an existing note."}, {"name": "Remove", "description": "Removes a note."}, {"name": "SaveChangesAsync", "description": "Saves all pending changes asynchronously."}], "calls": ["Task<Note?>.GetByIdAsync", "Task<List<Note>>.ListAsync", "Task<int>.CountAsync", "Task.AddAsync", "Task.SaveChangesAsync"], "search-terms": ["INoteRepository", "Note repository", "Repository pattern", "Note CRUD", "NotesBackend.Infrastructure.Repositories"], "state": 2, "file_id": 10, "knowledge_revision": 21, "git_revision": "", "hash": "2a128de58df191e8b6a6a5a6584f3808", "format-version": 4, "code-base-name": "notes_backend", "filename": "notes_backend/Infrastructure/Repositories/INoteRepository.cs", "revision_history": [{"21": ""}]}